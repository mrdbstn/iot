[{"C:\\Users\\20191873\\Desktop\\scor\\iot\\mobile_app\\src\\index.js":"1","C:\\Users\\20191873\\Desktop\\scor\\iot\\mobile_app\\src\\App.js":"2","C:\\Users\\20191873\\Desktop\\scor\\iot\\mobile_app\\src\\reportWebVitals.js":"3","C:\\Users\\20191873\\Desktop\\scor\\iot\\mobile_app\\src\\components\\Navbar\\Navbar.js":"4","C:\\Users\\20191873\\Desktop\\scor\\iot\\mobile_app\\src\\components\\Header\\Header.js":"5","C:\\Users\\20191873\\Desktop\\scor\\iot\\mobile_app\\src\\components\\Events\\Events.js":"6","C:\\Users\\20191873\\Desktop\\scor\\iot\\mobile_app\\src\\components\\Upload\\Upload.js":"7","C:\\Users\\20191873\\Desktop\\scor\\iot\\mobile_app\\src\\components\\Connect\\Connect.js":"8","C:\\Users\\20191873\\Desktop\\scor\\iot\\mobile_app\\src\\components\\Memories\\Memories.js":"9","C:\\Users\\20191873\\Desktop\\scor\\iot\\mobile_app\\src\\components\\aws-exports.js":"10","C:\\Users\\20191873\\Desktop\\scor\\iot\\mobile_app\\src\\components\\Forms\\Forms.js":"11","C:\\Users\\20191873\\Desktop\\scor\\iot\\mobile_app\\src\\components\\Album\\Album.js":"12","C:\\Users\\20191873\\Desktop\\scor\\iot\\mobile_app\\src\\components\\AlbumPage\\AlbumPage.js":"13"},{"size":500,"mtime":499162500000,"results":"14","hashOfConfig":"15"},{"size":1106,"mtime":1610138086963,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"15"},{"size":438,"mtime":1607966063767,"results":"18","hashOfConfig":"15"},{"size":777,"mtime":1610147814731,"results":"19","hashOfConfig":"15"},{"size":193,"mtime":1607975741843,"results":"20","hashOfConfig":"15"},{"size":361,"mtime":1609867317656,"results":"21","hashOfConfig":"15"},{"size":200,"mtime":1607975768765,"results":"22","hashOfConfig":"15"},{"size":3147,"mtime":1610458642046,"results":"23","hashOfConfig":"15"},{"size":580,"mtime":1610030599857,"results":"24","hashOfConfig":"15"},{"size":5559,"mtime":1610060786622,"results":"25","hashOfConfig":"15"},{"size":370,"mtime":1610466838544,"results":"26","hashOfConfig":"15"},{"size":1069,"mtime":1610144354381,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"ib5cny",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"30"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"30"},"C:\\Users\\20191873\\Desktop\\scor\\iot\\mobile_app\\src\\index.js",[],["62","63"],"C:\\Users\\20191873\\Desktop\\scor\\iot\\mobile_app\\src\\App.js",[],"C:\\Users\\20191873\\Desktop\\scor\\iot\\mobile_app\\src\\reportWebVitals.js",[],"C:\\Users\\20191873\\Desktop\\scor\\iot\\mobile_app\\src\\components\\Navbar\\Navbar.js",[],"C:\\Users\\20191873\\Desktop\\scor\\iot\\mobile_app\\src\\components\\Header\\Header.js",["64"],"import React from 'react'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport './Header.css'\r\n\r\nfunction Header({}) {\r\n    const location = useLocation()\r\n    const history = useHistory()\r\n\r\n    let pathname = location.pathname.substring(1) ? location.pathname.substring(1) : \"Memories\"\r\n    let pathnameCap = pathname.charAt(0).toUpperCase() + pathname.slice(1)\r\n    return (\r\n        <div className=\"header\">\r\n            <div onClick={() => {\r\n                history.push('./upload')\r\n            }}className=\"header__container\">\r\n                <button className=\"header__upload-button\">Upload</button>\r\n                <h1 className=\"header__title\">{pathnameCap}</h1>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","C:\\Users\\20191873\\Desktop\\scor\\iot\\mobile_app\\src\\components\\Events\\Events.js",[],"C:\\Users\\20191873\\Desktop\\scor\\iot\\mobile_app\\src\\components\\Upload\\Upload.js",["65"],"import React from 'react'\r\nimport { MemoriesForm, TestForm } from '../Forms/Forms'\r\nimport './Upload.css'\r\n\r\n\r\nfunction Upload() {\r\n    return (\r\n        <div className=\"upload\" style={{height:\"80vh\"}}>\r\n            <div className=\"upload__container\">\r\n                <MemoriesForm />\r\n            </div>\r\n         </div> \r\n    )\r\n}\r\n\r\nexport default Upload\r\n ","C:\\Users\\20191873\\Desktop\\scor\\iot\\mobile_app\\src\\components\\Connect\\Connect.js",[],"C:\\Users\\20191873\\Desktop\\scor\\iot\\mobile_app\\src\\components\\Memories\\Memories.js",["66","67","68","69","70","71"],"import React, { useEffect, useState } from 'react'\r\nimport Amplify, { Storage } from 'aws-amplify'\r\nimport awsconfig from '../aws-exports'\r\nimport './Memories.css'\r\nimport Album from '../Album/Album'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nAmplify.configure(awsconfig)\r\n\r\n\r\n\r\nfunction processStorageList(results) {\r\n    const filesystem = {}\r\n    // https://stackoverflow.com/questions/44759750/how-can-i-create-a-nested-object-representation-of-a-folder-structure\r\n    const add = (source, target, item) => {\r\n        const elements = source.split(\"/\");\r\n        const element = elements.shift();\r\n        if (!element) return // blank\r\n        target[element] = target[element] || { __data: item }// element;\r\n        if (elements.length) {\r\n            target[element] = typeof target[element] === \"object\" ? target[element] : {};\r\n            add(elements.join(\"/\"), target[element], item);\r\n        }\r\n    };\r\n    results.forEach(item => add(item.key, filesystem, item));\r\n    return filesystem\r\n}\r\n\r\nfunction iterate(obj, array) {\r\n    let result = array;\r\n\r\n    Object.keys(obj).forEach(key => {\r\n        if (typeof obj[key] === 'object') {\r\n            iterate(obj[key], result)\r\n        } else if (obj[key].toString().includes('file')){\r\n            let x = obj[key].toString()\r\n            result.push(x)\r\n        }\r\n    })\r\n\r\n    return result\r\n}\r\n\r\n\r\n\r\nfunction Memories() {\r\n\r\n    const [files, setFiles] = useState([])\r\n    const [albums, setAlbums] = useState([{\r\n        albumName: undefined,\r\n        imglink: undefined\r\n    }])\r\n    const [holder, setHolder] = useState([])\r\n\r\n    const history = useHistory();\r\n\r\n    const handleClick = (album) => {\r\n        const link = '/a/' + album\r\n        history.push(link)\r\n    }\r\n\r\n    async function fetchAlbums() {\r\n        let list = await Storage.list('')\r\n        let filesystem = processStorageList(list)\r\n        let subfilesystem = Object.entries(filesystem)\r\n        let imgs = new Set()\r\n        let result = iterate(subfilesystem, [])\r\n        result.map(r => {\r\n            imgs.add(r)\r\n            \r\n        })\r\n        let objectList = []\r\n\r\n        imgs.forEach(i => {\r\n            Storage.get(i)\r\n            .then(result => {\r\n                let name = i.split('/')\r\n                let object = {\r\n                    albumName: name[0],\r\n                    imglink: result.toString()\r\n                }\r\n                setAlbums(oldArray => [...oldArray, object])\r\n            })\r\n        }) \r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        fetchAlbums()\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"memories\" style={{ height: \"80vh\" }}>\r\n            <div className=\"masonry\">\r\n\r\n                {\r\n                    // files.map((f, i) => (\r\n                    //     <img key={i} src={f} alt=\"oi\" />\r\n                    // ))\r\n\r\n                    albums.slice(1).map((a, i) => {\r\n                        return <Album func={handleClick}\r\n                            img={a.imglink} name={a.albumName} key={i} />\r\n                    })\r\n\r\n\r\n\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Memories\r\n","C:\\Users\\20191873\\Desktop\\scor\\iot\\mobile_app\\src\\components\\aws-exports.js",[],"C:\\Users\\20191873\\Desktop\\scor\\iot\\mobile_app\\src\\components\\Forms\\Forms.js",["72"],"import { Formik, Form, Field, ErrorMessage, FieldArray } from 'formik'\r\nimport React, { useState, useEffect, useRef } from 'react'\r\nimport Amplify, {Storage} from 'aws-amplify'\r\nimport awsconfig from '../aws-exports'\r\nimport './Forms.css'\r\n\r\nAmplify.configure(awsconfig);\r\n\r\nexport const Thumb = ({ file }) => {\r\n\r\n    const [thumb, setThumb] = useState(undefined)\r\n    const isFirstRun = useRef(true)\r\n    useEffect(() => {\r\n        if (isFirstRun.current) {\r\n            isFirstRun.current = false;\r\n            return;\r\n        }\r\n        let reader = new FileReader();\r\n        reader.onloadend = () => {\r\n            setThumb(reader.result)\r\n        }\r\n        reader.readAsDataURL(file)\r\n\r\n    }, [file])\r\n\r\n    return (\r\n        <img\r\n            src={thumb}\r\n            alt=''\r\n            height={200}\r\n            width={200} />\r\n    )\r\n}\r\n\r\n\r\nexport const MemoriesForm = () => {\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{\r\n                    name: '',\r\n                    date: '',\r\n                    pictures: [{\r\n                        file: undefined\r\n                    }]\r\n                }}\r\n                validate={values => {\r\n                    const errors = {};\r\n                    if (!values.name || !values.date || !values.pictures) {\r\n                        errors.name = 'Required';\r\n                        errors.date = 'Required';\r\n                        errors.pictures = 'Required';\r\n                    }\r\n                    return errors;\r\n                }}\r\n                onSubmit={(values, actions) => {\r\n\r\n                    let data = new FormData()\r\n                    values.pictures.map((picture, index) => {\r\n                        data.append(`album-${values.name}-${values.date}/file_${index}`, picture.file)\r\n                    })\r\n                    data.append('name', values.name)\r\n                    \r\n                    for (let [key, file] of data.entries()) {\r\n                        if (key.includes('file')) {\r\n                           Storage.put(key, file, {\r\n                               contentType: \"image/png\"\r\n                           })\r\n                           .then(result => console.log(result))\r\n                           .catch(err => console.log(err))\r\n                        }   \r\n                    }\r\n\r\n                    actions.setSubmitting(false);\r\n                }}>\r\n                {({ isSubmitting, setFieldValue, values }) => (\r\n                    <Form>\r\n                        <label htmlFor=\"name\">Name: </label> <br />\r\n                        <Field type=\"name\" name=\"name\" />\r\n                        <ErrorMessage name=\"name\" component=\"div\" />\r\n                        <label htmlFor=\"date\">Date: </label> <br />\r\n                        <Field type=\"date\" name=\"date\" /> <br />\r\n                        <ErrorMessage name=\"date\" component=\"div\" />\r\n                        <FieldArray name='pictures'>\r\n                            {({ insert, remove, push }) => (\r\n\r\n                                <div>\r\n                                    {values.pictures.length > 0 &&\r\n                                        values.pictures.map((picture, index) => (\r\n                                            <div className=\"row\" key={index}>\r\n                                                <div className=\"col\">\r\n                                                    <label htmlFor={`pictures.${index}.name`}>Picture</label>\r\n                                                    <Field\r\n                                                        name={`pictures.${index}.name`}\r\n                                                        type='file'\r\n                                                        onChange={event => {\r\n                                                            setFieldValue(`pictures.${index}.file`, event.currentTarget.files[0])\r\n                                                        }}\r\n                                                    />\r\n                                                    <Thumb file={picture.file} />\r\n                                                    <ErrorMessage name={`pictures.${index}.name`} component=\"div\" />\r\n                                                </div>\r\n                                                <div className=\"col\">\r\n                                                    <button\r\n                                                        type='button'\r\n                                                        className=\"secondary\"\r\n                                                        onClick={() => remove(index)}>\r\n                                                        X\r\n                                                        </button>\r\n                                                </div>\r\n                                            </div>\r\n                                        ))}\r\n                                    <button\r\n                                        type='button'\r\n                                        className=\"secondary\"\r\n                                        onClick={() => push({ file: undefined })}>Add picture</button>\r\n                                </div>\r\n                            )}\r\n                        </FieldArray>\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            Submit\r\n                        </button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\n",["73","74"],"C:\\Users\\20191873\\Desktop\\scor\\iot\\mobile_app\\src\\components\\Album\\Album.js",["75","76"],"import React, { useEffect } from 'react'\r\nimport '../Album/album.css'\r\n\r\nfunction Album({ name, func, img }) {\r\n    const album = name\r\n\r\n    return (\r\n        <div onClick={() => func(album)} className=\"album\">\r\n            <img className=\"album__image\" src={img} />\r\n            <p className=\"album__text\">{name}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Album\r\n","C:\\Users\\20191873\\Desktop\\scor\\iot\\mobile_app\\src\\components\\AlbumPage\\AlbumPage.js",["77","78"],"import Amplify, { Storage } from 'aws-amplify'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\nimport awsconfig from '../aws-exports'\r\n\r\nAmplify.configure(awsconfig)\r\n\r\n\r\n\r\nfunction AlbumPage() {\r\n\r\n    const [images, setImages] = useState([])\r\n    let location = useLocation()\r\n    const link = location.pathname.split('/')\r\n    const directory = link[2]\r\n    console.log(directory)\r\n    const albumname = directory.split(\"-\")\r\n\r\n    async function fetchImages() {\r\n        let list = await Storage.list(directory)\r\n        console.log(list)\r\n        let images = list.map(f => Storage.get(f.key))\r\n\r\n        images = await Promise.all(images)\r\n        setImages(images)\r\n        console.log(images)\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchImages()\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n           {\r\n                images.map((f, i) => (\r\n                    <img key={i} src={f} alt=\"oi\" />\r\n                ))   \r\n            }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AlbumPage\r\n",{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":5,"column":17,"nodeType":"85","messageId":"86","endLine":5,"endColumn":19},{"ruleId":"87","severity":1,"message":"88","line":2,"column":24,"nodeType":"89","messageId":"90","endLine":2,"endColumn":32},{"ruleId":"87","severity":1,"message":"91","line":48,"column":12,"nodeType":"89","messageId":"90","endLine":48,"endColumn":17},{"ruleId":"87","severity":1,"message":"92","line":48,"column":19,"nodeType":"89","messageId":"90","endLine":48,"endColumn":27},{"ruleId":"87","severity":1,"message":"93","line":53,"column":12,"nodeType":"89","messageId":"90","endLine":53,"endColumn":18},{"ruleId":"87","severity":1,"message":"94","line":53,"column":20,"nodeType":"89","messageId":"90","endLine":53,"endColumn":29},{"ruleId":"95","severity":1,"message":"96","line":68,"column":22,"nodeType":"97","messageId":"98","endLine":68,"endColumn":24},{"ruleId":"87","severity":1,"message":"99","line":72,"column":13,"nodeType":"89","messageId":"90","endLine":72,"endColumn":23},{"ruleId":"95","severity":1,"message":"96","line":59,"column":58,"nodeType":"97","messageId":"98","endLine":59,"endColumn":60},{"ruleId":"79","replacedBy":"100"},{"ruleId":"81","replacedBy":"101"},{"ruleId":"87","severity":1,"message":"102","line":1,"column":17,"nodeType":"89","messageId":"90","endLine":1,"endColumn":26},{"ruleId":"103","severity":1,"message":"104","line":9,"column":13,"nodeType":"105","endLine":9,"endColumn":55},{"ruleId":"87","severity":1,"message":"106","line":17,"column":11,"nodeType":"89","messageId":"90","endLine":17,"endColumn":20},{"ruleId":"107","severity":1,"message":"108","line":32,"column":8,"nodeType":"109","endLine":32,"endColumn":10,"suggestions":"110"},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","no-unused-vars","'TestForm' is defined but never used.","Identifier","unusedVar","'files' is assigned a value but never used.","'setFiles' is assigned a value but never used.","'holder' is assigned a value but never used.","'setHolder' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'objectList' is assigned a value but never used.",["111"],["112"],"'useEffect' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'albumname' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchImages'. Either include it or remove the dependency array.","ArrayExpression",["113"],"no-global-assign","no-unsafe-negation",{"desc":"114","fix":"115"},"Update the dependencies array to be: [fetchImages]",{"range":"116","text":"117"},[819,821],"[fetchImages]"]